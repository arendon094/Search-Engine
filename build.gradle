apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    //wtf is 'guava'!?!? prune it?
    compile 'com.google.guava:guava:18.0'
    compile 'edu.uci.ics:crawler4j:4.2'
    compile 'org.apache.tika:tika-parsers:1.11'
    compile 'org.mongodb:mongo-java-driver:3.0.4'
    compile 'org.jsoup:jsoup:1.8.3'
    compile 'org.mongodb.morphia:morphia:1.0.1'
    compile 'org.apache.lucene:lucene-core:3.6.1'
    compile "com.clarifai:clarifai-api-java:1.2.0"
    
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

task data_dump(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'edu.csula.cs454.data_dump.DataDump'
}

task index(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'edu.csula.cs454.indexer.IndexDocuments'
    if (project.hasProperty("arguments")) {
        args arguments.split(",")
    }
}

task  mung_insert(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'edu.csula.cs454.mung.MungInsert'
    if (project.hasProperty("arguments")) {
        args arguments.split(",")
    }
}

task crawl(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'edu.csula.cs454.crawler.CrawlerApp'
      // simple defensive programming to define optional arguments
    if (project.hasProperty("arguments")) {
        args arguments.split(" ")
    }
}
